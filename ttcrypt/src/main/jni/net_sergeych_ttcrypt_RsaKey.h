/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class net_sergeych_ttcrypt_RsaKey */

#ifndef _Included_net_sergeych_ttcrypt_RsaKey
#define _Included_net_sergeych_ttcrypt_RsaKey
#ifdef __cplusplus
extern "C" {
#endif
#undef net_sergeych_ttcrypt_RsaKey_SHA1
#define net_sergeych_ttcrypt_RsaKey_SHA1 0L
#undef net_sergeych_ttcrypt_RsaKey_SHA256
#define net_sergeych_ttcrypt_RsaKey_SHA256 1L
/*
 * Class:     net_sergeych_ttcrypt_RsaKey
 * Method:    selfTest
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_net_sergeych_ttcrypt_RsaKey_selfTest
  (JNIEnv *, jclass);

/*
 * Class:     net_sergeych_ttcrypt_RsaKey
 * Method:    getParam
 * Signature: (Ljava/lang/String;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_net_sergeych_ttcrypt_RsaKey_getParam
  (JNIEnv *, jobject, jstring);

/*
 * Class:     net_sergeych_ttcrypt_RsaKey
 * Method:    hasPrivate
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_net_sergeych_ttcrypt_RsaKey_hasPrivate
  (JNIEnv *, jobject);

/*
 * Class:     net_sergeych_ttcrypt_RsaKey
 * Method:    generate
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_net_sergeych_ttcrypt_RsaKey_generate
  (JNIEnv *, jobject, jint);

/*
 * Class:     net_sergeych_ttcrypt_RsaKey
 * Method:    bits
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_net_sergeych_ttcrypt_RsaKey_bits
  (JNIEnv *, jobject);

/*
 * Class:     net_sergeych_ttcrypt_RsaKey
 * Method:    setParam
 * Signature: (Ljava/lang/String;[B)V
 */
JNIEXPORT void JNICALL Java_net_sergeych_ttcrypt_RsaKey_setParam
  (JNIEnv *, jobject, jstring, jbyteArray);

/*
 * Class:     net_sergeych_ttcrypt_RsaKey
 * Method:    normalizeKey
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_net_sergeych_ttcrypt_RsaKey_normalizeKey
  (JNIEnv *, jobject);

/*
 * Class:     net_sergeych_ttcrypt_RsaKey
 * Method:    _sign
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_net_sergeych_ttcrypt_RsaKey__1sign
  (JNIEnv *, jobject, jbyteArray, jint);

/*
 * Class:     net_sergeych_ttcrypt_RsaKey
 * Method:    _verify
 * Signature: ([B[BI)Z
 */
JNIEXPORT jboolean JNICALL Java_net_sergeych_ttcrypt_RsaKey__1verify
  (JNIEnv *, jobject, jbyteArray, jbyteArray, jint);

/*
 * Class:     net_sergeych_ttcrypt_RsaKey
 * Method:    freeResources
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_net_sergeych_ttcrypt_RsaKey_freeResources
  (JNIEnv *, jobject);

/*
 * Class:     net_sergeych_ttcrypt_RsaKey
 * Method:    staticInit
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_net_sergeych_ttcrypt_RsaKey_staticInit
  (JNIEnv *, jclass);


JNIEXPORT jobjectArray JNICALL
Java_net_sergeych_ttcrypt_RsaKey_factorize(JNIEnv *env, jclass type, jbyteArray product_);

JNIEXPORT void JNICALL
Java_net_sergeych_ttcrypt_RJ256__1setKey(JNIEnv *env, jobject instance, jbyteArray key_);

JNIEXPORT void JNICALL
Java_net_sergeych_ttcrypt_RJ256_processBlock(JNIEnv *env, jobject instance, jboolean encrypt,
                                             jbyteArray data_);

JNIEXPORT void JNICALL
Java_net_sergeych_ttcrypt_RJ256_freeResources(JNIEnv *env, jobject instance);



#ifdef __cplusplus
}
#endif
#endif
